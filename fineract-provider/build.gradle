/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
description = '''\
Run as:
gradle clean tomcatrunwar
'''
buildscript {
  repositories {
  	 jcenter()
  	 mavenCentral()
  	 maven { url "https://plugins.gradle.org/m2/" }
  }

  dependencies {
     classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.0',
               'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0',
               'org.zeroturnaround:gradle-jrebel-plugin:1.1.2',
               'org.springframework.boot:spring-boot-gradle-plugin:1.1.6.RELEASE' // also change springDataJpaVersion below
     //classpath 'org.apache.openjpa:openjpa-all:2.4.1'
     //classpath 'org.apache.openjpa:openjpa:2.4.1'
     //classpath 'at.schmutterer.oss.gradle:gradle-openjpa:0.2.0'
     classpath 'gradle.plugin.org.nosphere.apache:creadur-rat-gradle:0.2.2'
     //classpath 'org.drizzle.jdbc:drizzle-jdbc:1.3'
	 classpath("gradle.plugin.com.boxfuse.client:flyway-release:4.0")
	 //classpath('org.flywaydb:flyway-gradle-plugin:3.0')
  }
}

apply plugin: 'spring-boot'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'tomcat'
apply plugin: 'project-report'
apply plugin: 'java'
apply plugin: 'org.flywaydb.flyway'

/* define the valid syntax level for source files */
sourceCompatibility = JavaVersion.VERSION_1_8
/* define binary compatibility version */
targetCompatibility = JavaVersion.VERSION_1_8

project.ext.springBootVersion = '1.1.6.RELEASE'
project.ext.springVersion = '4.0.7.RELEASE'
project.ext.springOauthVersion = '2.0.4.RELEASE'
project.ext.jerseyVersion = '1.17'
project.ext.springDataJpaVersion = '1.7.0.RELEASE' // also change spring-boot-gradle-plugin version above

project.ext.mysqlUser='root'
project.ext.mysqlPassword='Platform@123'


group = 'org.apache.fineract'
buildDir = new File(rootProject.projectDir, "../build")
repositories {
	jcenter()
	mavenCentral() // useful for local dev using MariaDB4j SNAPSHOTs (not needed for real-world non-SNAPHOT builds)
}

configurations {
	providedRuntime // needed for Spring Boot executable WAR
    providedCompile
	compile() {
		//exclude module: 'hibernate-entitymanager'
		//exclude module: 'hibernate-validator'
		exclude module: 'activation'
		exclude module: 'bcmail-jdk14'
		exclude module: 'bcprov-jdk14'
		exclude module: 'bctsp-jdk14'
		exclude module: 'bval-core'
		exclude module: 'org.apache.bval.bundle'
		exclude module: 'bval-jsr303'
		exclude module: 'c3p0'
		exclude module: 'stax-api'
		exclude module: 'jaxb-api'
		exclude module: 'jaxb-impl'
		//exclude module: 'jboss-logging'
		exclude module: 'itext-rtf'
		exclude module: 'classworlds'
		//exclude module: 'jcl-over-slf4j'
		exclude module: 'jul-to-slf4j'
		exclude module: 'serp'
	}
	runtime
	all*.exclude group: 'commons-logging'
}
/* Pick up dependencies based on the environemnt, defaults to production */
if (project.hasProperty('env') && project.getProperty('env') == 'dev') {
    apply from:  'dev-dependencies.gradle'
}  else {
    apply from: 'dependencies.gradle'
}

/* Enable Oauth2 authentication based on environment, default to HTTP basic auth */
if (project.hasProperty('security') && project.getProperty('security') == 'oauth') {
	copy {
	    from './properties/oauth/'
	    into 'src/main/resources/'
	    include '*.properties'
	}
}  else {
	copy {
	    from './properties/basicauth/'
	    into 'src/main/resources/'
	    include '*.properties'
	}
}

springBoot {
    mainClass = 'org.apache.fineract.ServerApplication'
}